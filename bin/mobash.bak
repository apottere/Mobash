#!/bin/bash
# Compiled with MoBash v2.0

################################################################################
# INFO
################################################################################
#
# Name:		mobash
# Author:	Andrew Potter apottere@gmail.com
# Release:	2.0
# Date:		
#
# A simplistic modular bash compiler
#

################################################################################
# CONFIGS
################################################################################

MOBASH_VERSION="2.0"

# These are default values that will get overriden by a .mobashrc file found in
# any directory above where the mobash script resides.
MOBASH_CONFIG_PATH=""   # config_path
MOBASH_SOURCE_PATH=""   # source_path
MOBASH_INCLUDE_PATH=""  # include_path
MOBASH_IMPORT_PATH=""   # import_path
MOBASH_BIN_DIR=""       # bin_dir

################################################################################
# GENERATED CODE
################################################################################
mo_main () 
{ 
    local RS='\033[0;0m';
    local LGRN='\033[0;32m';
    local LYEL='\033[0;33m';
    local LCYN='\033[0;36m';
    local LBLU='\033[0;34m';
    local LMGT='\033[0;35m';
    local RED='\033[1;31m';
    local GRN='\033[1;32m';
    local YEL='\033[1;33m';
    local CYN='\033[1;36m';
    local BLU='\033[1;34m';
    function mobash_finalize () 
    { 
        echo;
        print_ln "%-${FORMAT_WIDTH}s" "Finalizing script " $YEL;
        echo 'mo_main "$@"' >> $BIN_NEW;
        if [[ -n $PRESERVE_TEMP_FILES ]]; then
            cp $BIN_NEW $BIN;
        else
            mv $BIN_NEW $BIN;
        fi;
        chmod 755 $BIN;
        echo -e "$RS${GRN}Complete$RS";
        mobash_cleanup
    };
    function mobash_cleanup () 
    { 
        print_ln "%-${FORMAT_WIDTH}s" "Cleaning up files " $YEL;
        echo -e "$RS${GRN}Complete$RS";
        if [[ -z $PRESERVE_TEMP_FILES ]]; then
            rm $BIN_NEW >&/dev/null;
            rm $SOURCE_FILE_CUSTOM >&/dev/null;
        fi;
        exit 0
    };
    function mobash_resolve_function_for_file () 
    { 
        local file="$1";
        local func="$2";
        print_ln "%-${FORMAT_WIDTH}s" "    $func(): " $LMGT;
        echo -n -e "$RED";
        bash -c 'source '$file'; if [[ $(declare -f '$func') == "" ]]; then exit 1; else declare -f '$func' | grep -v \"^$\" >> '$BIN_NEW'; fi';
        if [[ $? == 1 ]]; then
            echo -e "No valid function declaration found.$RS";
            echo;
            mobash_cleanup;
        else
            echo -e "$RS${GRN}Complete$RS";
        fi
    };
    function mobash_resolve_imports () 
    { 
        echo -e "${YEL}Building dependency list...$RS";
        dict_init MOBASH_IMPORTS;
        local include;
        unset IFS;
        for include in $(dict_get_keys INCLUDE_FILES);
        do
            local absolute="$(dict_get INCLUDE_FILES $include)";
            local filename="$(basename "$absolute")";
            print_ln "%-${FORMAT_WIDTH}s" "  $include: " $CYN;
            echo -e "${LGRN}$absolute$RS";
            local import;
            unset IFS;
            for import in $(grep "^#@import" "$absolute" | awk '{ print $2 }' | sort | uniq);
            do
                mobash_insert_import "$import" "$filename";
            done;
        done;
        local imports_searched imports_searched_i;
        dict_init imports_searched;
        dict_init IMPORT_FILES;
        local imports_needed="true";
        while [[ -n $imports_needed ]]; do
            imports_needed="";
            local import;
            unset IFS;
            for import in $(dict_get_keys MOBASH_IMPORTS);
            do
                if ! dict_contains_key imports_searched $import; then
                    dict_set imports_searched $import "true";
                    print_ln "%-${FORMAT_WIDTH}s" "  $import: " $CYN;
                    local module=$(mobash_get_import_module $import);
                    local module_file;
                    if [[ ! -n $(dict_contains_key IMPORT_FILES $module) ]]; then
                        module_file="$(resolve_file_in_path "$module.shm" "$IMPORT_PATH" ":")";
                        if [[ ! -n $module_file ]]; then
                            echo -e "${RED}No file found in path for: $module$RS";
                            mobash_cleanup;
                        fi;
                        dict_set IMPORT_FILES "$module" "$module_file";
                    else
                        module_file="$(dict_get IMPORT_FILES "$module")";
                    fi;
                    echo -e "${LGRN}$module_file$RS";
                    local function_imports=$(grep "^#@function $import:" "$module_file" | cut -d':' -f 2 | sed 's/^ *//');
                    if [[ -n $function_imports ]]; then
                        local function_import;
                        unset IFS;
                        for function_import in $function_imports;
                        do
                            if mobash_insert_import "$function_import" "$(basename "$(dict_get MOBASH_IMPORTS $import)")->$module"; then
                                imports_needed="true";
                            fi;
                        done;
                    fi;
                fi;
            done;
        done
    };
    function mobash_insert_import () 
    { 
        if [[ -n "$1" ]]; then
            print_ln "%-$(( $FORMAT_WIDTH + 2 ))s" "    $1: " $LMGT;
            local current="$(dict_get MOBASH_IMPORTS "$1")";
            if [[ -n $current ]]; then
                echo -e "${LYEL}$current$RS";
                return 1;
            else
                echo -e "${GRN}New dependency$RS";
                dict_set MOBASH_IMPORTS "$1" "$2";
                return 0;
            fi;
        fi
    };
    function mobash_transfer_import_contents () 
    { 
        echo -e "\n${YEL}Writing imports...$RS";
        local current_module='';
        local function_names;
        unset IFS;
        for import in $(tr ' ' '\n' <<< "$(dict_get_keys MOBASH_IMPORTS)" | sort);
        do
            local module=$(mobash_get_import_module $import);
            if [[ $module != $current_module ]]; then
                mobash_transfer_queued_contents;
                current_module="$module";
                arrays_init function_names;
            fi;
            arrays_push function_names "$(mobash_get_import_function $import)";
        done;
        mobash_transfer_queued_contents
    };
    function mobash_transfer_queued_contents () 
    { 
        if [[ -n $current_module ]]; then
            print_ln "%-${FORMAT_WIDTH}s" "  $current_module: " $CYN;
            echo -n -e "$RED";
            ( local file="$(dict_get IMPORT_FILES $current_module)";
            for function_name in "${function_names[@]}";
            do
                local real_name="$(mobash_get_function_name "$current_module" "$function_name")";
                if [[ -n $(declare -f "$real_name") ]]; then
                    unset -f "$real_name";
                fi;
            done;
            if source "$file"; then
                echo -e "$LGRN$file";
                local function_name;
                unset IFS;
                for function_name in "${function_names[@]}";
                do
                    print_ln "%-$(( $FORMAT_WIDTH + 2 ))s" "    $function_name: " $LMGT;
                    local function_def="$(declare -f "$(mobash_get_function_name "$current_module" "$function_name")")";
                    if [[ -n $function_def ]]; then
                        echo "$function_def" >> $BIN_NEW;
                        echo -e "${GRN}Complete$RS";
                    else
                        echo -e "${RED}Not found in module file.";
                        return 1;
                    fi;
                done;
            else
                return 1;
            fi );
            if [[ $? -ne 0 ]]; then
                mobash_cleanup;
            fi;
        fi
    };
    function mobash_get_import_module () 
    { 
        echo "${1%%\.*}"
    };
    function mobash_get_import_function () 
    { 
        local function;
        if [[ $1 =~ .*\..* ]]; then
            function="${1#*\.}";
        else
            function=$(mobash_get_import_module $1);
        fi;
        echo "$function"
    };
    function mobash_get_function_name () 
    { 
        if [[ $1 == $2 ]]; then
            echo "$1";
        else
            echo "${1}_$2";
        fi
    };
    function mobash_get_filenames () 
    { 
        print_ln "%-${FORMAT_WIDTH}s" "Resolving source " $YEL;
        SOURCE_FILE=$(resolve_file_in_path "$1.shs" "$SOURCE_PATH" ":");
        if [[ ! -n $SOURCE_FILE ]]; then
            echo -e "${RED}No source found in path for: $1.shs$RS";
            exit 1;
        fi;
        SOURCE_FILE_CUSTOM="$SOURCE_FILE.custom";
        echo -e "${LGRN}$SOURCE_FILE$RS";
        echo -e "${YEL}Finding includes...$RS";
        dict_init INCLUDE_FILES;
        local include_file include_absolute_file;
        unset IFS;
        for include_file in $(grep "^#@include" "$SOURCE_FILE" | awk '{ print $2 }');
        do
            print_ln "%-${FORMAT_WIDTH}s" "  $include_file: " $CYN;
            include_absolute_file=$(resolve_file_in_path "$include_file" "$INCLUDE_PATH" ":");
            if [[ -n $include_absolute_file ]]; then
                dict_set INCLUDE_FILES "$include_file" "$include_absolute_file";
                echo -e "${LGRN}$include_absolute_file$RS";
            else
                echo;
                dict_dump INCLUDE_FILES;
                echo -e "\n${RED}No source file in path for: $include_file$RS";
                mobash_cleanup;
            fi;
        done;
        dict_set INCLUDE_FILES "$1.shs" "$SOURCE_FILE";
        CONFIG_FILE=$(cat $SOURCE_FILE | grep "^#@config" | head -1 | awk '{ print $2 }');
        if [[ -n $CONFIG_FILE ]]; then
            echo;
            print_ln "%-${FORMAT_WIDTH}s" "Resolving config " $YEL;
            local temp_config_file=$(resolve_file_in_path "$CONFIG_FILE" "$CONFIG_PATH" ":");
            if [[ -n $temp_config_file ]]; then
                CONFIG_FILE="$temp_config_file";
                echo -e "${LGRN}$temp_config_file$RS";
            else
                echo -e "${RED}No config found in path for: $temp_config_file$RS";
                exit 1;
            fi;
        fi;
        print_ln "%-${FORMAT_WIDTH}s" "Resolving output " $YEL;
        BIN="$(resolve_dir $BIN_DIR)/$1$BIN_EXTENSION";
        BIN_NEW="$BIN.new";
        echo -e "${LGRN}$BIN$RS"
    };
    function mobash_get_custom_contents () 
    { 
        echo "mo_main() {" > $SOURCE_FILE_CUSTOM;
        mobash_color_write "$SOURCE_FILE_CUSTOM";
        echo -e "\n${YEL}Collecting custom...$RS";
        local f;
        unset IFS;
        for f in $(dict_get_values INCLUDE_FILES);
        do
            print_ln "%-${FORMAT_WIDTH}s" "  $f: " $CYN;
            cat "$f" >> $SOURCE_FILE_CUSTOM;
            echo >> $SOURCE_FILE_CUSTOM;
            echo -e "${GRN}Complete$RS";
        done;
        echo "}" >> $SOURCE_FILE_CUSTOM;
        print_ln "%-${FORMAT_WIDTH}s" "Writing custom " $YEL;
        echo -n -e "$RED";
        if mobash_apply_custom_contents; then
            echo -e "$RS${GRN}Complete$RS";
        else
            echo -e -n "$RS";
            echo;
            mobash_cleanup;
        fi
    };
    function mobash_apply_custom_contents () 
    { 
        ( if source $SOURCE_FILE_CUSTOM; then
            declare -f mo_main >> $BIN_NEW;
        else
            return 1;
        fi )
    };
    function mobash_init_bin () 
    { 
        echo "#!/bin/bash" > $BIN_NEW;
        echo -e "# Compiled with MoBash v$MOBASH_VERSION\n" >> $BIN_NEW;
        if [[ -n $CONFIG_FILE ]]; then
            cat "$CONFIG_FILE" >> $BIN_NEW;
        fi;
        echo -e "\n################################################################################" >> $BIN_NEW;
        echo "# GENERATED CODE" >> $BIN_NEW;
        echo "################################################################################" >> $BIN_NEW
    };
    function mobash_usage () 
    { 
        cat  <<EOT

usage: mobash [options] <binary>                    Compile <binary> from sources.
   or: mobash [options] <binary> -r [args ..]       Compile <binary> and run it with [args ..]

Arguments:
   -sh                       Append .sh to the compiled binary
   -p, --preserve            Leave .custom and .new files in place after exit

EOT

    }
    function mobash_config_read_file () 
    { 
        if [[ -f $1 && -r $1 ]]; then
            unset IFS;
            local i j;
            for i in $(cat $1);
            do
                IFS='=';
                j=($i);
                mobash_config_switch_key "${j[0]}" "${j[1]}";
            done;
        fi
    };
    function mobash_config_switch_key () 
    { 
        case "$1" in 
            'config_path')
                CONFIG_PATH="$2"
            ;;
            'source_path')
                SOURCE_PATH="$2"
            ;;
            'include_path')
                INCLUDE_PATH="$2"
            ;;
            'import_path')
                IMPORT_PATH="$2"
            ;;
            'bin_dir')
                BIN_DIR="$2"
            ;;
        esac
    };
    function mobash_config_init () 
    { 
        echo -e "${YEL}Collapsing configs...$RS";
        IFS='
';
        local i;
        for i in $(resolve_expanded_path $@);
        do
            mobash_config_read_file "${i}/.mobashrc";
        done;
        print_ln "%-${FORMAT_WIDTH}s" "  CONFIG_PATH: " $CYN;
        echo -e "${GRN}$CONFIG_PATH";
        print_ln "%-${FORMAT_WIDTH}s" "  SOURCE_PATH: " $CYN;
        echo -e "${GRN}$SOURCE_PATH";
        print_ln "%-${FORMAT_WIDTH}s" "  INCLUDE_PATH: " $CYN;
        echo -e "${GRN}$INCLUDE_PATH";
        print_ln "%-${FORMAT_WIDTH}s" "  IMPORT_PATH: " $CYN;
        echo -e "${GRN}$IMPORT_PATH";
        print_ln "%-${FORMAT_WIDTH}s" "  BIN_DIR: " $CYN;
        echo -e "${GRN}$BIN_DIR";
        echo
    };
    function mobash_color_write () 
    { 
        echo -e "\n${YEL}Parsing colors:$RS";
        local color;
        IFS='
';
        for color in $(dict_get_values INCLUDE_FILES | xargs grep -h '^#@color');
        do
            unset IFS;
            color="${color#\#@color }";
            local variable="$(cut -f1 -d' ' <<< "$color")";
            local args="$(cut -f2- -d' ' <<< "$color")";
            local code="$(bbc_build $args)";
            print_ln "%-${FORMAT_WIDTH}s" "  $variable" $CYN;
            echo -n -e "${LGRN}";
            echo -n "$code";
            echo -e "${LGRN}";
            echo "local $variable='$code'" >> "$1";
        done
    };
    echo -e "\n${LBLU}Initializing Mobash v$MOBASH_VERSION$RS";
    local BIN_EXTENSION;
    local PRESERVE_TEMP_FILES;
    local FORMAT_WIDTH='70';
    while [[ $1 != "" ]]; do
        case $1 in 
            "-r" | '--run')
                RUN="true";
                shift 1
            ;;
            '-sh')
                BIN_EXTENSION='.sh';
                shift 1
            ;;
            '-p' | '--preserve')
                PRESERVE_TEMP_FILES='true';
                shift 1
            ;;
            *)
                source_name="${1%\.sh}";
                shift 1
            ;;
        esac;
    done;
    if [[ -n $source_name ]]; then
        echo -e "${LBLU}Building binary: $source_name$BIN_EXTENSION$RS\n";
    else
        mobash_usage;
        exit 1;
    fi;
    local BIN;
    local BIN_NEW;
    local CONFIG_FILE;
    local SOURCE_FILE;
    local SOURCE_FILE_CUSTOM;
    local INCLUDE_FILES INCLUDE_FILES_i;
    local IMPORT_FILES IMPORT_FILES_i;
    local MOBASH_IMPORTS MOBASH_IMPORTS_i;
    local BIN_DIR;
    local IMPORT_PATH;
    local INCLUDE_PATH;
    local SOURCE_PATH;
    local CONFIG_PATH;
    mobash_config_init "$0";
    mobash_get_filenames $source_name;
    mobash_init_bin;
    mobash_resolve_imports $source_name;
    mobash_get_custom_contents;
    mobash_transfer_import_contents;
    mobash_finalize
}
arrays_contains () 
{ 
    local arrays_i;
    for arrays_i in $(arrays_get $1 @);
    do
        if [[ $arrays_i == $2 ]]; then
            return 0;
        fi;
    done;
    return 1
}
arrays_get () 
{ 
    local array="$1[${2:?$(error 'Array index required.')}]";
    echo "${!array}"
}
arrays_get_indicies () 
{ 
    unset IFS;
    eval 'echo ${!'"${1:?$(error 'Array name is required.')}"'[@]}'
}
arrays_index_of () 
{ 
    local i;
    unset IFS;
    for i in $(arrays_get_indicies $1);
    do
        local elem="$(arrays_get $1 $i)";
        if [[ $elem == $2 ]]; then
            echo "$i";
            return 0;
        fi;
    done
}
arrays_init () 
{ 
    read -a "${1:?$(error 'Array name is required.')}" <<< ''
}
arrays_len () 
{ 
    eval 'echo ${#'"$1"'[@]}'
}
arrays_push () 
{ 
    arrays_set $1 $(arrays_len $1) "$2"
}
arrays_set () 
{ 
    read -r "$1[$2]" <<< "$3"
}
bbc_build () 
{ 
    local code="\033[";
    local colon="";
    local helper;
    if [[ "$1" =~ reset|RESET|Reset ]]; then
        echo "${code}0;0m";
        return;
    fi;
    while [[ $1 != "" ]]; do
        code="${code}$colon";
        colon=";";
        case "$1" in 
            "fg")
                helper="bbc_helper_foreground";
                shift 1;
                code="${code}$( $helper $1 )"
            ;;
            "bg")
                helper="bbc_helper_background";
                shift 1;
                code="${code}$( $helper $1 )"
            ;;
            "reg")
                code="${code}0"
            ;;
            "bold")
                code="${code}1"
            ;;
            "dim")
                code="${code}2"
            ;;
            "underline")
                code="${code}4"
            ;;
            "blink")
                code="${code}5"
            ;;
            *)
                echo -n " NO_CODE:\"$1\" "
            ;;
        esac;
        shift 1;
    done;
    echo -n "${code}m"
}
bbc_helper_background () 
{ 
    case "$1" in 
        "black")
            echo "40"
        ;;
        "red")
            echo "41"
        ;;
        "green")
            echo "42"
        ;;
        "yellow")
            echo "43"
        ;;
        "blue")
            echo "44"
        ;;
        "magenta")
            echo "45"
        ;;
        "cyan")
            echo "46"
        ;;
        "white")
            echo "47"
        ;;
        "gray")
            echo "100"
        ;;
        *)
            echo -n " NO_COLOR:\"$1\" "
        ;;
    esac
}
bbc_helper_foreground () 
{ 
    case "$1" in 
        "black")
            echo "30"
        ;;
        "red")
            echo "31"
        ;;
        "green")
            echo "32"
        ;;
        "yellow")
            echo "33"
        ;;
        "blue")
            echo "34"
        ;;
        "magenta")
            echo "35"
        ;;
        "cyan")
            echo "36"
        ;;
        "white")
            echo "37"
        ;;
        "gray")
            echo "90"
        ;;
        *)
            echo -n " NO_COLOR:\"$1\" "
        ;;
    esac
}
dict_contains_key () 
{ 
    arrays_contains $(dict_get_index_array $1) "$2"
}
dict_get () 
{ 
    local dict_i=$(arrays_index_of "$(dict_get_index_array $1)" "${2:?$(error 'Key is required.')}");
    if [[ -n $dict_i ]]; then
        echo "$(arrays_get $1 $dict_i)";
    fi
}
dict_get_index_array () 
{ 
    local dict_i="${1:?$(error 'Dictionary name is required.')}_i";
    : ${dict_i:?$(error "Dictionary index array $i does not exist.")};
    echo $dict_i
}
dict_get_keys () 
{ 
    arrays_get $(dict_get_index_array $1) @
}
dict_get_values () 
{ 
    arrays_get $1 @
}
dict_init () 
{ 
    arrays_init ${1:?$(error 'Dictionary name is required.')};
    arrays_init $(dict_get_index_array $1)
}
dict_set () 
{ 
    local dict_di="$(dict_get_index_array $1)";
    local dict_i=$(arrays_index_of $dict_di "${2:?$(error 'Key is required.')}");
    : ${dict_i:=$(arrays_len $dict_di)};
    arrays_set $dict_di $dict_i "$2";
    arrays_set $1 $dict_i "$3"
}
error () 
{ 
    local depth=${2:-0};
    echo "($(error_file)) $(error_format $depth "${1:-error}")";
    error_exit
}
error_exit () 
{ 
    if [[ $- != *i* ]]; then
        exit 1;
    fi
}
error_file () 
{ 
    echo "$(basename "${0#-}")"
}
error_format () 
{ 
    local prefix;
    local depth=$(( $1 + 1 ));
    local frame_depth=$(( $depth + 1 ));
    if [[ -n ${BASH_SOURCE[$frame_depth]} ]]; then
        prefix="at ${FUNCNAME[$depth]} (called from ${BASH_SOURCE[$frame_depth]}:${BASH_LINENO[$depth]})";
    else
        prefix="at $(ps -ocommand= -p $PPID | awk '{print $1}') (parent process)";
    fi;
    if [[ -n $2 ]]; then
        echo "$prefix: $2";
    else
        echo "$prefix";
    fi
}
print_ln () 
{ 
    [[ -n $3 ]] && echo -n -e "$3";
    printf "$1" "$(echo -n -e "$2")";
    [[ -n $3 ]] && echo -n -e '\033[0;0m'
}
resolve_dir () 
{ 
    local p="${1/#~/$HOME}";
    if [[ -f $p ]]; then
        resolve_dir $(dirname "$p");
    else
        if [[ -d $p ]]; then
            ( builtin cd "$p" >&/dev/null && pwd "$2" );
        fi;
    fi
}
resolve_expanded_path () 
{ 
    local current_dir="$(resolve_dir ${1:-.})";
    local expanded_dirs=("$current_dir");
    local d;
    while [[ $current_dir != '/' ]]; do
        current_dir="$(dirname $current_dir)";
        expanded_dirs=("$current_dir" "${expanded_dirs[@]}");
    done;
    for d in "${expanded_dirs[@]}";
    do
        echo "$d";
    done
}
resolve_file_in_path () 
{ 
    local d;
    local f;
    IFS="$3";
    for d in $2;
    do
        if [[ -n $d ]]; then
            d=$(resolve_dir $d);
            f=$(find $d -type f -name "$1" 2>/dev/null | head -1);
            if [[ -n $f ]]; then
                break;
            fi;
        fi;
    done;
    echo -n "$f"
}
mo_main "$@"
