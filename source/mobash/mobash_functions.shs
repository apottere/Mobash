#!/bin/bash

#@import print.ln

#@import resolve.dir
#@import resolve.file_in_path

mobash_finalize() {

	echo
	print_ln "%-70s" "${YEL}Finalizing script $RS"
	echo 'main "$@"' >> $MOBASH_BIN_NEW
	if [[ $MOBASH_PRESERVE_TEMP_FILES ]]; then
		cp $MOBASH_BIN_NEW $MOBASH_BIN
	else
		mv $MOBASH_BIN_NEW $MOBASH_BIN
	fi
	chmod 755 $MOBASH_BIN
	echo -e "$RS${GRN}Complete$RS"
	mobash_cleanup
}

mobash_cleanup() {
	print_ln "%-70s" "${YEL}Cleaning up files $RS"
	echo -e "$RS${GRN}Complete$RS"
	if [[ -z $MOBASH_PRESERVE_TEMP_FILES ]]; then
		rm $MOBASH_BIN_NEW &>/dev/null
		rm $MOBASH_SOURCE_FILE_CUSTOM &>/dev/null
	fi
	exit
}

mobash_resolve_function_for_file() {
	file=$1
	func=$2
	print_ln "%-70s" "    ${MGT}$func(): $RS$RED"
	bash -c 'source '$file'; if [[ `declare -f '$func'` == "" ]]; then exit 1; else declare -f '$func' | grep -v \"^$\" >> '$MOBASH_BIN_NEW'; fi'

	if [[ $? == 1 ]]; then
		echo -e "No valid function declaration found.$RS"
		echo
		mobash_cleanup
	else
		echo -e "$RS${GRN}Complete$RS"
	fi
}

# $1: Root for tree (source file name)
mobash_resolve_imports() {
	echo -e "${YEL}Building dependency list...$RS"
	mobash_source_file_name="$1.shs"

	declare -i MOBASH_IMPORTS_N
	declare -a MOBASH_IMPORTS
	unset MOBASH_IMPORTS_I
	for mobash_include_i in "${!MOBASH_INCLUDE_FILES[@]}"
	do
		print_ln "%-70s" "  ${CYN}${MOBASH_INCLUDE_FILES[$mobash_include_i]}: $RS"
		echo -e "${LGRN}${MOBASH_INCLUDE_ABSOLUTE_FILES[$mobash_include_i]}$RS"
		for mobash_import in `grep "^#@import" "${MOBASH_INCLUDE_ABSOLUTE_FILES[$mobash_include_i]}" | awk '{ print $2 }' | sort | uniq`
		do
			mobash_insert_import $mobash_import "${MOBASH_INCLUDE_FILES[$mobash_include_i]}"
		done
	done

	declare -a mobash_imports_searched
	unset MOBASH_IMPORT_FILES
	mobash_imports_needed="true"
	while [[ $mobash_imports_needed ]]; do
		mobash_imports_needed=""

		# for all imports in array
		for MOBASH_IMPORTS_N in "${!MOBASH_IMPORTS_I[@]}"; do
			mobash_import="${MOBASH_IMPORTS_I[$MOBASH_IMPORTS_N]}"

			# only do unsearched imports
			if [[ ! "${mobash_imports_searched[$MOBASH_IMPORTS_N]}" ]]; then
				mobash_imports_searched[$MOBASH_IMPORTS_N]="true"
				print_ln '%-70s' "  ${CYN}$mobash_import: $RS"
				mobash_module=`echo -n "$mobash_import" | sed 's/\..*//'`

				# if no file in map, find the file for that function.
				if [[ ! `mobash_get_file_map_index $mobash_module` ]]; then
					mobash_module_file=`resolve_file_in_path "$mobash_module.shm" "$MOBASH_IMPORT_PATH" ":"`
					if [[ ! $mobash_module_file ]]; then
						echo -e "${RED}No file found in path for: $mobash_module$RS"
						mobash_cleanup
					fi
					MOBASH_IMPORT_FILES_I[${#MOBASH_IMPORT_FILES[@]}]="$mobash_module"
					MOBASH_IMPORT_FILES[${#MOBASH_IMPORT_FILES[@]}]="$mobash_module_file"
				fi
				echo -e "${LGRN}${MOBASH_IMPORT_FILES[`mobash_get_file_map_index $mobash_module`]}$RS"


				# get imports for specific function from it's module file
				mobash_function_imports=`grep "^#@function $mobash_import:" "${MOBASH_IMPORT_FILES[$mobash_module]}" | awk -F': ' '{print $2}'`

				# if there are imports, add add them to the array if they're new
				if [[ $mobash_function_imports ]]; then

					BIFS="$IFS"
					IFS=' '
					for mobash_function_import in $mobash_function_imports; do

						if mobash_insert_import "$mobash_function_import" "${MOBASH_IMPORTS[$MOBASH_IMPORTS_N]}->$mobash_module"; then
							mobash_imports_needed="true"
						fi
					done
					IFS="$BIFS"
				fi
			fi

		done
	done

}

mobash_insert_import() {
	if [[ "$1" ]]; then
		print_ln "%-72s" "    ${MGT}$1: $RS"

		mobash_insert_import_n=`mobash_get_import_index $1`

		if [[ $mobash_insert_import_n ]]; then
			echo -e "${LYEL}${MOBASH_IMPORTS[$mobash_insert_import_n]}$RS"
			return 1
		else
			echo -e "${GRN}New dependency$RS"
			MOBASH_IMPORTS[${#MOBASH_IMPORTS_I[@]}]="$2"
			MOBASH_IMPORTS_I[${#MOBASH_IMPORTS_I[@]}]="$1"
			return 0
		fi
	fi
}

mobash_get_file_map_index() {
	for mobash_file_map_index in "${!MOBASH_IMPORT_FILES_I[@]}"
	do
		if [[ "${MOBASH_IMPORT_FILES_I[$mobash_file_map_index]}" == "$1" ]]; then
#			echo "found: "$mobash_file_map_index 1>&2
			echo $mobash_file_map_index
			return
#		else
#			echo "${MOBASH_IMPORT_FILES_I[$mobash_file_map_index]} is not $1" 1>&2
		fi
	done
}

mobash_transfer_import_contents() {
	echo -e "\n${YEL}Writing imports...$RS"
	mobash_transfer_current=""
	BIFS="$IFS"
	IFS=$'\n'
	for mobash_import_s in `sort <<< "${MOBASH_IMPORTS_I[*]}"`; do
		IFS="$BIFS"
		declare -a mobash_transfer_parts=(${mobash_import_s/./ })

		if [[ ${mobash_transfer_parts[0]} != $mobash_transfer_current ]]; then
			if ! mobash_transfer_queued_contents; then
				mobash_cleanup
			fi

			mobash_transfer_current="${mobash_transfer_parts[0]}"
			unset mobash_transfer_names; declare -a mobash_transfer_names
		fi
#		echo "Adding '${mobash_transfer_parts[1]}' to array."
		mobash_transfer_names[${#mobash_transfer_names[@]}]="${mobash_transfer_parts[1]}"
		IFS=$'\n'
	done
	IFS="$BIFS"

	if ! mobash_transfer_queued_contents; then
		mobash_cleanup
	fi
}

mobash_transfer_queued_contents() {
	if [[ $mobash_transfer_current ]]; then
		print_ln "%-70s" "  ${CYN}$mobash_transfer_current: $RS"
		echo -n -e "$RED"
		(
		if source ${MOBASH_IMPORT_FILES[`mobash_get_file_map_index $mobash_transfer_current`]};
		then
			echo -e "$LGRN${MOBASH_IMPORT_FILES[`mobash_get_file_map_index $mobash_transfer_current`]}"
			for mobash_transfer_name in ${mobash_transfer_names[@]};
			do 
				print_ln "%-72s" "    ${MGT}$mobash_transfer_name: $RS"
				declare -f "${mobash_transfer_current}_$mobash_transfer_name" >> $MOBASH_BIN_NEW
				echo -e "${GRN}Complete$RS"
			done
		else
			return 1
		fi
		)
	fi
}

# $1: Import name
mobash_get_import_index() {
	for mobash_get_import_n in "${!MOBASH_IMPORTS_I[@]}"
	do
		if [[ "$1" == "${MOBASH_IMPORTS_I[$mobash_get_import_n]}" ]]; then
			echo $mobash_get_import_n
			break
		fi
	done

}

# $1: Source filename
mobash_get_filenames() {

	# Source
	print_ln "%-70s" "${YEL}Resolving source $RS"

	MOBASH_SOURCE_FILE=`resolve_file_in_path "$1.shs" "$MOBASH_SOURCE_PATH" ":"`


	if [[ "$MOBASH_SOURCE_FILE" == "" ]]; then
		echo -e "${RED}No source found in path for: $1.shs$RS"
		exit
	fi
	MOBASH_SOURCE_FILE_CUSTOM="$MOBASH_SOURCE_FILE.custom"

	echo -e "${LGRN}$MOBASH_SOURCE_FILE$RS"

	echo -e "${YEL}Finding includes...$RS"
	unset MOBASH_INCLUDE_FILES
	unset MOBASH_INCLUDE_ABSOLUTE_FILES
	MOBASH_INCLUDE_FILES[0]="$1.shs"
	MOBASH_INCLUDE_ABSOLUTE_FILES[0]="$MOBASH_SOURCE_FILE"
	for mobash_include_file in `grep "^#@include" "$MOBASH_SOURCE_FILE" | awk '{ print $2 }'`
	do
		print_ln "%-70s" "  ${CYN}$mobash_include_file: $RS"
		mobash_include_absolute_file=`resolve_file_in_path "$mobash_include_file" "$MOBASH_INCLUDE_PATH" ":"`
		if [[ "$mobash_include_absolute_file" ]]; then
			MOBASH_INCLUDE_ABSOLUTE_FILES[${#MOBASH_INCLUDE_FILES[@]}]="$mobash_include_absolute_file"
			MOBASH_INCLUDE_FILES[${#MOBASH_INCLUDE_FILES[@]}]="$mobash_include_file"
			echo -e "${LGRN}$mobash_include_absolute_file$RS"
		else
			echo -e "${RED}No source file in path for: $mobash_include_file$RS"
			mobash_cleanup
		fi
	done

	# Config
	MOBASH_CONFIG_FILE=`cat $MOBASH_SOURCE_FILE | grep "^#@config" | head -1 | awk '{ print $2 }'`
	if [[ $MOBASH_CONFIG_FILE ]]; then
		echo
		print_ln "%-70s" "${YEL}Resolving config $RS"
		mobash_temp_config_file=`resolve_file_in_path "$MOBASH_CONFIG_FILE" "$MOBASH_CONFIG_PATH" ":"`

		if [[ $mobash_temp_config_file ]]; then
			MOBASH_CONFIG_FILE="$mobash_temp_config_file"
			echo -e "${LGRN}$mobash_temp_config_file$RS"
		else
			echo -e "${RED}No config found in path for: $mobash_temp_config_file$RS"
			exit
		fi
	fi

	# Output
	print_ln "%-70s" "${YEL}Resolving output $RS"
	MOBASH_BIN="`resolve_dir $MOBASH_BIN_DIR`/$1$MOBASH_BIN_EXTENSION"
	MOBASH_BIN_NEW="$MOBASH_BIN.new"
	echo -e "${LGRN}$MOBASH_BIN$RS"

}

mobash_get_custom_contents() {

	echo -e "\n${YEL}Collecting custom...$RS"

	echo "main() {" > $MOBASH_SOURCE_FILE_CUSTOM
		for (( mobash_include_i=${#MOBASH_INCLUDE_ABSOLUTE_FILES[@]}-1 ; mobash_include_i>=0 ; mobash_include_i-- )) ; do
		mobash_include_f=${MOBASH_INCLUDE_ABSOLUTE_FILES[mobash_include_i]}
		print_ln "%-70s" "  ${CYN}$mobash_include_f: $RS"
		cat $mobash_include_f >> $MOBASH_SOURCE_FILE_CUSTOM
		echo >> $MOBASH_SOURCE_FILE_CUSTOM
		echo -e "${GRN}Complete$RS"
	done

	echo "}" >> $MOBASH_SOURCE_FILE_CUSTOM

	print_ln "%-70s" "${YEL}Writing custom $RS"
	echo -n -e "$RED"
	if mobash_apply_custom_contents; then
		echo -e "$RS${GRN}Complete$RS"
	else
		echo -e -n "$RS"
		echo
		mobash_cleanup

	fi

}

mobash_apply_custom_contents() {
	(
		if source $MOBASH_SOURCE_FILE_CUSTOM; then
			declare -f main >> $MOBASH_BIN_NEW
		else
			return 1
		fi
	)
}


mobash_init_bin() {
	echo "#!/bin/bash" > $MOBASH_BIN_NEW
	echo -e "# Compiled with MoBash v$MOBASH_VERSION\n" >> $MOBASH_BIN_NEW

	if [[ $MOBASH_CONFIG_FILE ]]; then
		cat "$MOBASH_CONFIG_FILE" >> $MOBASH_BIN_NEW
	fi

	echo -e "\n################################################################################" >> $MOBASH_BIN_NEW
	echo "# GENERATED CODE" >> $MOBASH_BIN_NEW
	echo "################################################################################" >> $MOBASH_BIN_NEW

}

mobash_usage() {
	cat <<EOT

usage: mobash [options] <binary>                    Compile <binary> from sources.
   or: mobash [options] <binary> -r [args ..]       Compile <binary> and run it with [args ..]

Arguments:
   -sh                       Append .sh to the compiled binary
   -p, --preserve            Leave .custom and .new files in place after exit

EOT
}
